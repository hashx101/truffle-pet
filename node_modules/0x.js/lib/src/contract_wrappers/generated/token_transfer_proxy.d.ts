/**
 * This file is auto-generated using abi-gen. Don't edit directly.
 * Templates can be found at https://github.com/0xProject/0x.js/tree/development/packages/0x.js/contract_templates.
 */
import { TxData } from '@0xproject/types';
import { BigNumber } from '@0xproject/utils';
import * as Web3 from 'web3';
import { BaseContract } from './base_contract';
export declare type TokenTransferProxyContractEventArgs = LogAuthorizedAddressAddedContractEventArgs | LogAuthorizedAddressRemovedContractEventArgs;
export declare enum TokenTransferProxyEvents {
    LogAuthorizedAddressAdded = "LogAuthorizedAddressAdded",
    LogAuthorizedAddressRemoved = "LogAuthorizedAddressRemoved",
}
export interface LogAuthorizedAddressAddedContractEventArgs {
    target: string;
    caller: string;
}
export interface LogAuthorizedAddressRemovedContractEventArgs {
    target: string;
    caller: string;
}
export declare class TokenTransferProxyContract extends BaseContract {
    transferFrom: {
        sendTransactionAsync(token: string, from: string, to: string, value: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(token: string, from: string, to: string, value: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(token: string, from: string, to: string, value: BigNumber, txData?: TxData): string;
    };
    addAuthorizedAddress: {
        sendTransactionAsync(target: string, txData?: TxData): Promise<string>;
        estimateGasAsync(target: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(target: string, txData?: TxData): string;
    };
    authorities: {
        callAsync(index_0: BigNumber, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    removeAuthorizedAddress: {
        sendTransactionAsync(target: string, txData?: TxData): Promise<string>;
        estimateGasAsync(target: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(target: string, txData?: TxData): string;
    };
    owner: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    authorized: {
        callAsync(index_0: string, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<boolean>;
    };
    getAuthorizedAddresses: {
        callAsync(defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string[]>;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: TxData): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: TxData): string;
    };
    constructor(web3ContractInstance: Web3.ContractInstance, defaults: Partial<TxData>);
}
